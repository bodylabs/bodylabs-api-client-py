#!/usr/bin/env python

# This is a CLI client for the foot product line API servers, both for
# general utility and as a demonstration of using the API client.

import os

AXES = {
    'x': [1.0, 0.0, 0.0],
    'y': [0.0, 1.0, 0.0],
    'z': [0.0, 0.0, 1.0],
    '-x': [-1.0, 0.0, 0.0],
    '-y': [0.0, -1.0, 0.0],
    '-z': [0.0, 0.0, -1.0],
}

def main():
    import argparse
    from bodylabs_api.client import Client
    from bodylabs_api.foot import FootInput
    from bodylabs_api.laser import LaserInput
    from bodylabs_api.kinect import KinectInput
    from bodylabs_api.multi_sweep import MultiSweepInput

    parser = argparse.ArgumentParser(description='Interact with the Bodylabs foot scan processing API')
    parser.add_argument('base_uri', type=str, help='API server base URI')
    parser.add_argument('--access_key', type=str, help='API server access key')
    parser.add_argument('--secret', type=str, help='API server secret')
    parser.subs = parser.add_subparsers(help='sub-command help', dest='command')

    subparsers = {}
    subparsers['verify'] = parser.subs.add_parser('verify', help='Verify credentials')
    subparsers['upload'] = parser.subs.add_parser('upload', help='Upload and process a scan')
    subparsers['get'] = parser.subs.add_parser('get', help='Download a result')

    subparsers['upload'].add_argument('scan_path', type=str, help='Path to the foot scan')
    subparsers['upload'].add_argument('--input_type', type=str, choices=['foot', 'kinect', 'laser', 'multisweep'], help='Input type')

    # common parameter group
    common_parameters_group = subparsers['upload'].add_argument_group('common', 'common parameters')
    common_parameters_group.add_argument('--up', default='y', choices=AXES.keys(), type=str, help='which axis is up')
    common_parameters_group.add_argument('--look', default='z', choices=AXES.keys(), type=str, help='which axis are the toes pointing along')

    # foot
    foot_parameters_group = subparsers['upload'].add_argument_group('foot', 'foot parameters')

    foot_parameters_group.add_argument('--side', default='right', choices=['right', 'left'], type=str, help='Which foot')
    foot_parameters_group.add_argument('--units', default='cm', type=str, help='Units scan is measured in')

    # laser
    laser_parameters_group = subparsers['upload'].add_argument_group('laser', 'laser parameters')

    laser_parameters_group.add_argument('--gender', choices=['male', 'female'], type=str, help='gender of the input')
    laser_parameters_group.add_argument('--init', default='A', type=str, help='initial pose')
    laser_parameters_group.add_argument('--hands', default='open', choices=['open', 'closed'], type=str, help='hands pose')
    laser_parameters_group.add_argument('--scan_units', default='m', type=str, help='scan units')
    laser_parameters_group.add_argument('--target_resolution', choices=['low', 'medium', 'high'], default='medium', type=str, help='resolution')
    laser_parameters_group.add_argument('--target_units', default='cm', type=str, help='output units')
    laser_parameters_group.add_argument('--triangulate', action='store_true', help='triangulate output')

    # kinect & multiweep doesn't have any params right now

    subparsers['get'].add_argument('--input_type', type=str, choices=['foot', 'kinect', 'laser', 'multisweep'], help='Input type')
    subparsers['get'].add_argument('what', type=str, choices=['input', 'scan', 'measurements', 'curves', 'alignment', 'alignment_scan_pose', 'normalized_scan'], help='What to download')
    subparsers['get'].add_argument('input_id', type=str, help='Input ID to download from')
    subparsers['get'].add_argument('-o', '--output', default=None, type=str, help='Output path for the result, defaults to current directory')

    args = parser.parse_args()

    client = Client(args.base_uri, args.access_key, args.secret)

    input_class = {
        'foot': FootInput,
        'laser': LaserInput,
        'kinect': KinectInput,
        'multisweep': MultiSweepInput,
    }

    if args.command == 'verify':
        if client.verify_account():
            print "Login ok"
        else:
            print "Login FAILED"
    elif args.command == 'upload':

        parameters_mapping = {
            'foot': {
                'side': args.side,
                'up': AXES[args.up],
                'look': AXES[args.look],
                'scanUnits': args.units,
            },

            'laser': {
                'gender': args.gender,
                'init': args.init,
                'hands': args.hands,
                'scanUnits': args.scan_units,
                'up': AXES[args.up],
                'look': AXES[args.look],
                'closeFit': True,
                'cleanScan': True,
                'refineHead': True,
                'removePlatform': False,
                'targetResolution': args.target_resolution,
                'targetUnits': args.target_units,
                'triangulate': args.triangulate,
            },

            'kinect': {
                'usedBodyViews': [1, 2, 3, 4],
            },
            'multisweep': {},
        }


        input_obj = input_class[args.input_type].by_uploading_scan(client, args.scan_path, parameters_mapping[args.input_type])
        input_obj.print_description()
    elif args.command == 'get':
        input_obj = input_class[args.input_type].get_input(client, args.input_id)
        if args.what == 'input':
            input_obj.print_description()
        elif args.what == 'scan':
            if args.output:
                output_path = args.output
            else:
                output_path = 'input_scan' + os.path.splitext(input_obj.files['scan'])[1]
            input_obj.download_to(output_path)
        else: # we're downloading an artifact
            # Note that for these, it would be awesome if we could query the input for artifacts that are already made, rather than creating them anew...
            if args.what == 'measurements':
                output_path = args.output or 'measurements.json'
                artifact = input_obj.measurements
            elif args.what == 'curves':
                output_path = args.output or 'curves.json'
                artifact = input_obj.curves
            elif args.what == 'alignment':
                output_path = args.output or 'alignment.obj'
                artifact = input_obj.alignment
            elif args.what == 'normalized_scan':
                output_path = args.output or 'normalized_scan.obj'
                artifact = input_obj.normalized_scan
            elif args.what == 'alignment_scan_pose':
                output_path = args.output or 'alignment_scan_pose.obj'
                artifact = input_obj.alignment_scan_pose
            artifact.print_description()
            artifact.download_to(output_path)


if __name__ == '__main__':
    main()
